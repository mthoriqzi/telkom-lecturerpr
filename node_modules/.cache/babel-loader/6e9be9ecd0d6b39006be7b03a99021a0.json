{"ast":null,"code":"'use strict';\n/* global WorkerGlobalScope self */\n\nvar _require = require('./log'),\n    log = _require.log;\n\nfunction reloadApp(_ref, _ref2) {\n  var hotReload = _ref.hotReload,\n      hot = _ref.hot,\n      liveReload = _ref.liveReload;\n  var isUnloading = _ref2.isUnloading,\n      currentHash = _ref2.currentHash;\n\n  if (isUnloading || !hotReload) {\n    return;\n  }\n\n  if (hot) {\n    log.info('[WDS] App hot update...');\n\n    var hotEmitter = require('webpack/hot/emitter');\n\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n\n    if (typeof self !== 'undefined' && self.window) {\n      // broadcast update to window\n      self.postMessage(\"webpackHotUpdate\".concat(currentHash), '*');\n    }\n  } // allow refreshing the page only if liveReload isn't disabled\n  else if (liveReload) {\n    var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)\n\n    var intervalId = self.setInterval(function () {\n      if (rootWindow.location.protocol !== 'about:') {\n        // reload immediately if protocol is valid\n        applyReload(rootWindow, intervalId);\n      } else {\n        rootWindow = rootWindow.parent;\n\n        if (rootWindow.parent === rootWindow) {\n          // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n          applyReload(rootWindow, intervalId);\n        }\n      }\n    });\n  }\n\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    log.info('[WDS] App updated. Reloading...');\n    rootWindow.location.reload();\n  }\n}\n\nmodule.exports = reloadApp;","map":{"version":3,"names":["_require","require","log","reloadApp","_ref","_ref2","hotReload","hot","liveReload","isUnloading","currentHash","info","hotEmitter","emit","self","window","postMessage","concat","rootWindow","intervalId","setInterval","location","protocol","applyReload","parent","clearInterval","reload","module","exports"],"sources":["/home/danu/tel-u/node_modules/webpack-dev-server/client/utils/reloadApp.js"],"sourcesContent":["'use strict';\n/* global WorkerGlobalScope self */\n\nvar _require = require('./log'),\n    log = _require.log;\n\nfunction reloadApp(_ref, _ref2) {\n  var hotReload = _ref.hotReload,\n      hot = _ref.hot,\n      liveReload = _ref.liveReload;\n  var isUnloading = _ref2.isUnloading,\n      currentHash = _ref2.currentHash;\n\n  if (isUnloading || !hotReload) {\n    return;\n  }\n\n  if (hot) {\n    log.info('[WDS] App hot update...');\n\n    var hotEmitter = require('webpack/hot/emitter');\n\n    hotEmitter.emit('webpackHotUpdate', currentHash);\n\n    if (typeof self !== 'undefined' && self.window) {\n      // broadcast update to window\n      self.postMessage(\"webpackHotUpdate\".concat(currentHash), '*');\n    }\n  } // allow refreshing the page only if liveReload isn't disabled\n  else if (liveReload) {\n      var rootWindow = self; // use parent window for reload (in case we're in an iframe with no valid src)\n\n      var intervalId = self.setInterval(function () {\n        if (rootWindow.location.protocol !== 'about:') {\n          // reload immediately if protocol is valid\n          applyReload(rootWindow, intervalId);\n        } else {\n          rootWindow = rootWindow.parent;\n\n          if (rootWindow.parent === rootWindow) {\n            // if parent equals current window we've reached the root which would continue forever, so trigger a reload anyways\n            applyReload(rootWindow, intervalId);\n          }\n        }\n      });\n    }\n\n  function applyReload(rootWindow, intervalId) {\n    clearInterval(intervalId);\n    log.info('[WDS] App updated. Reloading...');\n    rootWindow.location.reload();\n  }\n}\n\nmodule.exports = reloadApp;"],"mappings":"AAAA;AACA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,OAAD,CAAtB;AAAA,IACIC,GAAG,GAAGF,QAAQ,CAACE,GADnB;;AAGA,SAASC,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;EAC9B,IAAIC,SAAS,GAAGF,IAAI,CAACE,SAArB;EAAA,IACIC,GAAG,GAAGH,IAAI,CAACG,GADf;EAAA,IAEIC,UAAU,GAAGJ,IAAI,CAACI,UAFtB;EAGA,IAAIC,WAAW,GAAGJ,KAAK,CAACI,WAAxB;EAAA,IACIC,WAAW,GAAGL,KAAK,CAACK,WADxB;;EAGA,IAAID,WAAW,IAAI,CAACH,SAApB,EAA+B;IAC7B;EACD;;EAED,IAAIC,GAAJ,EAAS;IACPL,GAAG,CAACS,IAAJ,CAAS,yBAAT;;IAEA,IAAIC,UAAU,GAAGX,OAAO,CAAC,qBAAD,CAAxB;;IAEAW,UAAU,CAACC,IAAX,CAAgB,kBAAhB,EAAoCH,WAApC;;IAEA,IAAI,OAAOI,IAAP,KAAgB,WAAhB,IAA+BA,IAAI,CAACC,MAAxC,EAAgD;MAC9C;MACAD,IAAI,CAACE,WAAL,CAAiB,mBAAmBC,MAAnB,CAA0BP,WAA1B,CAAjB,EAAyD,GAAzD;IACD;EACF,CAXD,CAWE;EAXF,KAYK,IAAIF,UAAJ,EAAgB;IACjB,IAAIU,UAAU,GAAGJ,IAAjB,CADiB,CACM;;IAEvB,IAAIK,UAAU,GAAGL,IAAI,CAACM,WAAL,CAAiB,YAAY;MAC5C,IAAIF,UAAU,CAACG,QAAX,CAAoBC,QAApB,KAAiC,QAArC,EAA+C;QAC7C;QACAC,WAAW,CAACL,UAAD,EAAaC,UAAb,CAAX;MACD,CAHD,MAGO;QACLD,UAAU,GAAGA,UAAU,CAACM,MAAxB;;QAEA,IAAIN,UAAU,CAACM,MAAX,KAAsBN,UAA1B,EAAsC;UACpC;UACAK,WAAW,CAACL,UAAD,EAAaC,UAAb,CAAX;QACD;MACF;IACF,CAZgB,CAAjB;EAaD;;EAEH,SAASI,WAAT,CAAqBL,UAArB,EAAiCC,UAAjC,EAA6C;IAC3CM,aAAa,CAACN,UAAD,CAAb;IACAjB,GAAG,CAACS,IAAJ,CAAS,iCAAT;IACAO,UAAU,CAACG,QAAX,CAAoBK,MAApB;EACD;AACF;;AAEDC,MAAM,CAACC,OAAP,GAAiBzB,SAAjB"},"metadata":{},"sourceType":"script"}